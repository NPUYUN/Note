# Numpy 广播机制
import numpy as np

"""
广播(Broadcast)是numpy对不同形状的数组进行市值计算的方法，对数组的算术运算通常在相应元素上进行

如果两个数组a和b的形状相同，那么a和b的算术运算的结果为a与b数组对应位置元素的算术运算结果

如果两个数组的形状不同，必须满足：
- 对于每个维度，两个数组的对应维度大小要么相等，要么其中一个为1
否则，就无法进行广播，会引发ValueError异常

广播机制原理：
- 如果两个数组维度数量不同，维度较少的数组会在其前面(左侧)自动添加新的维度，使得两个数组的维度数量相同
- 当某一维度大小为1时，则会扩展(复制)以匹配另一个数组的对应维度大小

例如：a = np.array([[1, 2, 3]])
b = np.array([[1 , 2 , 3] , [4, 5, 6]])
那么a + b的结果为：
[[1 , 2 , 3]
 [5 , 7 , 9]]
即[[1+1, 2+2, 3+3] 
 [1+4, 2+5, 3+6]]
即将a的第二个元素扩展为[1 , 2 , 3]，此时a = np.array([[1, 2, 3], [1, 2, 3]])

补充：numpy.tile(A , reps)：将数组A重复reps次，返回一个新的数组
- A : 输入数组
- reps：
    - 如果为整数：简单将A向右复制 reps - 1 次形成新的数组
    - 如果为列表、元素、数组等：以[m , n]形式为例，即将A重复m行n列，返回一个新的数组
"""

# 实例1：形状相同的数组运算
a = np.array([1 , 2 , 3])
b = np.array([4 , 5 , 6])
print(a * b)

# 实例2：标量与数组的运算
a = np.array([1 , 2 , 3])
b = 2
print(a + b) # b被视为形状为()的数组，扩展后b的形状变为(1,)，再扩展成(3, )与a匹配

# 实例3：不同维度数组的运算
a = np.array([[1 , 2 , 3] , [4 , 5 , 6]])
b = np.array([10 , 20 , 30])
print(a + b)

# 实例4： 需要双向扩展的情况
a = np.array([[1] , [2], [3]])
b = np.array([10 , 20 , 30])
print(a + b)

# 实例5：numpy.tile(A , reps)
a = np.arange(5)
print(np.tile(a , 2))
print(np.tile(a , (2, 2)))

